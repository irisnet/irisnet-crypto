package irisnet.tx;
//syntax = "proto3";

//pbjs -t static-module -w commonjs -o tx.js tx.proto
message Coin {
    required string denom = 1;
    required string amount = 2;
}
message Input {
    required bytes address = 1;
    repeated Coin coins = 2;
}

message Output {
    required bytes address = 1;
    repeated Coin coins = 2;
}

message MsgSend {
    repeated Input  input = 1;
    repeated Output output = 2;
}

message MsgDelegate {
    required bytes delegatorAddr = 1;
    required bytes validatorAddr = 2;
    required Coin delegation = 3;
}

message MsgBeginUnbonding {
    required bytes  delegatorAddr = 1;
    required bytes  validatorAddr = 2;
    required string  sharesAmount = 3;
}

message MsgBeginRedelegate {
    required bytes  delegatorAddr = 1;
    required bytes  validatorSrcAddr = 2;
    required bytes  validatorDstAddr = 3;
    required string  sharesAmount = 4;
}

message MsgWithdrawDelegatorRewardsAll {
    required bytes  delegatorAddr = 1;
}

message MsgWithdrawDelegatorReward {
    required bytes  delegatorAddr = 1;
    required bytes  validatorAddr = 2;
}

message MsgDeposit {
    required int64 proposalID = 1;
    required bytes depositor = 2;
    repeated Coin amount = 3;
}

message MsgVote {
    required int64 proposalID = 1;
    required bytes voter = 2;
    required uint64 option = 3;
}

message SwapInput {
    required bytes address = 1;
    required Coin coin = 2;
}
message SwapOutput {
    required bytes address = 1;
    required Coin coin = 2;
}
message MsgSwapOrder {
    required SwapInput input = 1;
    required SwapOutput output = 2;
    required int64 deadline = 3;
    required bool isBuyOrder = 4;
}
message MsgAddLiquidity {
    required Coin maxToken = 1;
    required string exactIrisAmt = 2;
    required string minLiquidity = 3;
    required int64 deadline = 4;
    required bytes sender = 5;
}

message MsgRemoveLiquidity {
    required string minToken = 1;
    required Coin withdrawLiquidity = 2;
    required string minIrisAmt = 3;
    required int64 deadline = 4;
    required bytes sender = 5;
}

message StdFee {
   repeated Coin amount = 1;
   required int64 gas = 2;
}

message StdSignature {
    required bytes pubKey = 1;
    required bytes signature = 2;
    required int64 accountNumber = 3;
    required int64 sequence = 4;
}

message StdTx {
    repeated bytes msgs = 1;
    required StdFee fee   = 2;
    repeated StdSignature signatures = 3;
    optional string memo = 4; //空值需要处理
}
